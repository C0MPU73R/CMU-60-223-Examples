#N canvas 4 22 1436 856 10;
#X obj 267 367 hsl 180 15 0 180 0 0 empty empty empty -2 -8 0 10 -262144
-1 -1 10557 1;
#X obj 265 427 s osc-output;
#X obj 264 341 r pin4-servo;
#X text 258 278 Servo on PIN4;
#X msg 264 400 /servo/4 \$1;
#X msg 258 304 0;
#X msg 324 304 180;
#X msg 290 304 90;
#X obj 559 302 * 4000;
#N canvas 0 22 450 278 (subpatch) 0;
#X array arraay 100 float 1;
#A 0 204.838 145.696 143.553 141.41 139.267 137.124 134.981 132.839
130.524 128.21 125.896 123.581 121.267 119.66 118.053 116.446 114.839
113.231 111.624 110.017 108.41 106.941 105.471 104.002 102.533 101.063
99.5938 98.1244 96.5173 94.9102 93.303 91.6959 89.1245 86.5531 83.9817
82.3745 80.7674 79.1603 79.1603 79.1603 79.1603 79.1603 79.1603 79.1603
79.1603 79.1603 79.1603 79.1603 79.1603 79.1603 79.1603 79.1603 79.1603
79.1603 79.1603 79.1603 79.1603 79.1603 79.1603 79.1603 79.1603 79.1603
79.1603 79.1603 79.1603 79.1603 79.1603 79.1603 79.1603 79.1603 79.1603
79.1603 79.1603 79.1603 79.1603 79.1603 79.1603 80.2317 81.3031 82.3745
83.446 84.5174 85.5888 88.1602 90.7316 93.303 95.8744 101.017 106.16
115.16 121.589 122.874 122.874 122.874 124.16 125.446 128.017 128.017
128.017 138.303;
#X coords 0 0 100 180 200 140 1 0 0;
#X restore 600 419 graph;
#X floatatom 470 212 5 0 0 0 - - -;
#X obj 470 90 line;
#X floatatom 390 138 5 0 0 0 - - -;
#X obj 498 125 sel 0;
#X obj 439 125 sel 100;
#X obj 458 286 osc~;
#X obj 455 315 dac~;
#X obj 470 188 tabread arraay;
#X msg 700 149 /dev/tty.usbmodemfd121;
#N canvas 608 52 673 665 Arduino-server 0;
#X obj 49 508 mrpeach/slipdec 65536;
#X obj 49 197 mrpeach/slipenc 65536;
#X obj 49 134 inlet;
#X obj 49 589 outlet;
#X obj 219 132 inlet;
#X msg 215 318 devices;
#X text 216 504 slipdec extracts an OSC data packet from a serial data
stream encoded using the SLIP protocol.;
#X text 211 196 slipenc encodes an OSC packet using the SLIP protocol
to delineate packet boundaries in the serial data stream. The argument
to slipenc sets a maximum packet size.;
#X text 274 314 Under OSX the Udoo SAM3X on the CN6 connector enumerates
as /dev/tty.SLAB_USBtoUART;
#X msg 217 376 close;
#X text 217 552 unpackOSC decodes the OSC data packet into a stream
of Pd messages \; see routeOSC for examples;
#X obj 49 439 comport 99 57600;
#X text 217 438 comport opens the specified serial port at the specified
baud rate when it the object is initialized \; using an invalid device
prevents it from opening the port until requestd;
#X msg 219 174 devicename \$1 \, baud 57600;
#X text 213 295 Click to print out the list of available serial devices.
;
#X text 216 357 Click to manually close the serial port.;
#X text 46 69 The left inlet receives Pd lists specifying OSC messages.
;
#X text 49 30 Subpatch to manage the OSC messaging to and from the
Arduino over a serial port.;
#X text 216 102 The right inlet receives a message with a symbol naming
the serial port.;
#X obj 219 153 list;
#X obj 49 165 osc/packOSC;
#X obj 49 550 osc/unpackOSC;
#X connect 0 0 21 0;
#X connect 1 0 11 0;
#X connect 2 0 20 0;
#X connect 4 0 19 0;
#X connect 5 0 11 0;
#X connect 9 0 11 0;
#X connect 11 0 0 0;
#X connect 13 0 11 0;
#X connect 19 0 13 0;
#X connect 20 0 1 0;
#X connect 21 0 3 0;
#X restore 601 205 pd Arduino-server;
#X text 718 199 This subpatch encapsulates the serial port protocol
for sending and receiving OSC messages to and from the Arduino.;
#X obj 601 173 r osc-output;
#X text 853 141 Arduino Due serial port. Change this to match the serial
port you choose in the Arduino IDE.;
#X msg 444 53 100 500;
#X msg 496 52 0 500;
#X obj 470 252 * 2;
#X connect 0 0 4 0;
#X connect 2 0 0 0;
#X connect 4 0 1 0;
#X connect 5 0 0 0;
#X connect 6 0 0 0;
#X connect 7 0 0 0;
#X connect 10 0 0 0;
#X connect 10 0 25 0;
#X connect 11 0 12 0;
#X connect 11 0 13 0;
#X connect 11 0 14 0;
#X connect 13 0 23 0;
#X connect 14 0 24 0;
#X connect 15 0 16 0;
#X connect 15 0 16 1;
#X connect 17 0 10 0;
#X connect 18 0 19 1;
#X connect 21 0 19 0;
#X connect 23 0 11 0;
#X connect 24 0 11 0;
#X connect 25 0 15 0;
